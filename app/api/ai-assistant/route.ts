import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import { webScraper } from '@/lib/web-scraper';
import { productDatabase } from '@/lib/product-database';
import { aiAnalyzer } from '@/lib/ai-analyzer';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –Ω–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä–∞
async function callNeuroParser(query: string, userPrompt?: string, context?: any, options?: any) {
  try {
    const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/ai-neuro-parser`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query,
        userPrompt,
        sources: options?.sources || ['wildberries', 'ozon'],
        maxProducts: options?.maxProducts || 20,
        includeAnalysis: options?.includeAnalysis !== false,
        saveToDatabase: options?.saveToDatabase !== false,
        context
      })
    });

    if (!response.ok) {
      throw new Error(`Neuro parser error: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error calling neuro parser:', error);
    return null;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è OpenRouter
const openai = process.env.OPENROUTER_API_KEY ? new OpenAI({
  apiKey: process.env.OPENROUTER_API_KEY,
  baseURL: 'https://openrouter.ai/api/v1',
}) : null;

const DEFAULT_MODEL = process.env.DEFAULT_AI_MODEL || 'deepseek/deepseek-chat-v3-0324:free';

interface AIAssistantRequest {
  message: string;
  action?: 'chat' | 'search' | 'analyze' | 'recommend' | 'compare';
  context?: {
    previousProducts?: any[];
    searchHistory?: string[];
    userPreferences?: Record<string, any>;
  };
  options?: {
    maxProducts?: number;
    sources?: string[];
    includeAnalysis?: boolean;
    saveToHistory?: boolean;
  };
}

export async function POST(request: NextRequest) {
  const startTime = Date.now();
  
  try {
    const body: AIAssistantRequest = await request.json();
    const { message, action, context, options } = body;

    if (!message?.trim()) {
      return NextResponse.json(
        { error: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' },
        { status: 400 }
      );
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const detectedAction = action || detectAction(message);
    
    let response: string;
    let data: any = {};
    let sourcesUsed: string[] = [];
    let productsFound = 0;

    switch (detectedAction) {
      case 'search':
        const searchResult = await handleSearch(message, options);
        response = searchResult.response;
        data.products = searchResult.products;
        sourcesUsed = searchResult.sourcesUsed;
        productsFound = searchResult.productsFound;
        break;

      case 'analyze':
        const analysisResult = await handleAnalysis(message, context, options);
        response = analysisResult.response;
        data.analysis = analysisResult.analysis;
        sourcesUsed = analysisResult.sourcesUsed;
        productsFound = analysisResult.productsFound;
        break;

      case 'recommend':
        const recommendResult = await handleRecommendations(message, context, options);
        response = recommendResult.response;
        data.recommendations = recommendResult.recommendations;
        sourcesUsed = recommendResult.sourcesUsed;
        productsFound = recommendResult.productsFound;
        break;

      case 'compare':
        const compareResult = await handleComparison(message, context, options);
        response = compareResult.response;
        data.comparison = compareResult.comparison;
        sourcesUsed = compareResult.sourcesUsed;
        productsFound = compareResult.productsFound;
        break;

      default:
        const chatResult = await handleChat(message, context);
        response = chatResult.response;
        break;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
    if (options?.saveToHistory && sourcesUsed.length > 0) {
      productDatabase.addSearchHistory(message, productsFound, sourcesUsed);
    }

    const executionTime = Date.now() - startTime;

    return NextResponse.json({
      response,
      data,
      metadata: {
        action: detectedAction,
        executionTime,
        sourcesUsed,
        productsFound
      }
    });

  } catch (error) {
    console.error('Error in AI Assistant:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function detectAction(message: string): string {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('–Ω–∞–π–¥–∏') || lowerMessage.includes('–ø–æ–∏—Å–∫') || lowerMessage.includes('–∏—â–∏') || 
      lowerMessage.includes('–Ω–∞–π—Ç–∏') || lowerMessage.includes('–ø–æ–∫–∞–∂–∏') || lowerMessage.includes('–∏—â—É')) {
    return 'search';
  }
  
  if (lowerMessage.includes('–∞–Ω–∞–ª–∏–∑') || lowerMessage.includes('–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π') || lowerMessage.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')) {
    return 'analyze';
  }
  
  if (lowerMessage.includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏') || lowerMessage.includes('–ø–æ—Å–æ–≤–µ—Ç—É–π') || lowerMessage.includes('–≤—ã–±–æ—Ä') ||
      lowerMessage.includes('—á—Ç–æ –≤—ã–±—Ä–∞—Ç—å') || lowerMessage.includes('–∫–∞–∫–æ–π –ª—É—á—à–µ')) {
    return 'recommend';
  }
  
  if (lowerMessage.includes('—Å—Ä–∞–≤–Ω–∏') || lowerMessage.includes('—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ') || lowerMessage.includes('—á—Ç–æ –ª—É—á—à–µ')) {
    return 'compare';
  }
  
  return 'chat';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
async function handleSearch(message: string, options?: any) {
  const searchQuery = extractSearchQuery(message);
  const sources = options?.sources || ['wildberries', 'ozon'];
  const maxProducts = options?.maxProducts || 20;

  // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä
  const neuroParserResult = await callNeuroParser(searchQuery, message, undefined, {
    sources,
    maxProducts,
    includeAnalysis: true,
    saveToDatabase: true
  });

  if (neuroParserResult?.success && neuroParserResult.data.products.length > 0) {
    const { products, summary, sourcesUsed, totalFound } = neuroParserResult.data;
    
    let response = `üß† **–ù–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª ${products.length} —Ç–æ–≤–∞—Ä–æ–≤:**\n\n`;
    response += `${summary}\n\n`;
    
    if (products.length > 0) {
      response += `üì¶ **–õ—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:**\n`;
      products.slice(0, 5).forEach((product: any, index: number) => {
        response += `${index + 1}. **${product.title}**\n`;
        response += `   üí∞ –¶–µ–Ω–∞: ${product.price} ${product.currency}\n`;
        if (product.rating) {
          response += `   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${product.rating}/5\n`;
        }
        response += `   üè™ –ò—Å—Ç–æ—á–Ω–∏–∫: ${product.source}\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (product.aiAnalysis) {
          response += `   ü§ñ **–ò–ò –∞–Ω–∞–ª–∏–∑:** ${product.aiAnalysis.summary}\n`;
          if (product.aiAnalysis.pros.length > 0) {
            response += `   ‚úÖ –ü–ª—é—Å—ã: ${product.aiAnalysis.pros.slice(0, 2).join(', ')}\n`;
          }
          if (product.aiAnalysis.cons.length > 0) {
            response += `   ‚ö†Ô∏è –ú–∏–Ω—É—Å—ã: ${product.aiAnalysis.cons.slice(0, 2).join(', ')}\n`;
          }
        }
        response += `\n`;
      });

      if (products.length > 5) {
        response += `... –∏ –µ—â–µ ${products.length - 5} —Ç–æ–≤–∞—Ä–æ–≤\n`;
      }
    }

    return { 
      response, 
      products, 
      sourcesUsed, 
      productsFound: products.length,
      neuroParserUsed: true 
    };
  }

  // –ï—Å–ª–∏ –Ω–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
  let allProducts: any[] = [];
  let sourcesUsed: string[] = [];

  // –ü–æ–∏—Å–∫ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º
  const existingProducts = productDatabase.searchProducts(searchQuery, {
    maxResults: maxProducts,
    sources: sources.includes('all') ? undefined : sources
  });

  if (existingProducts.length > 0) {
    allProducts = existingProducts;
    sourcesUsed = [...new Set(existingProducts.map(p => p.source))];
  }

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫—Ä–∞–ø–µ—Ä
  if (allProducts.length < maxProducts / 2) {
    try {
      const scrapedResults = await webScraper.scrapeProducts(searchQuery, sources);
      const scrapedProducts = scrapedResults.flatMap(result => result.products || []);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É
      productDatabase.addProducts(scrapedProducts);
      
      allProducts = [...existingProducts, ...scrapedProducts];
      sourcesUsed = [...new Set(allProducts.map(p => p.source))];
    } catch (error) {
      console.error('Error scraping products:', error);
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  allProducts.sort((a, b) => {
    const aRating = a.rating || 0;
    const bRating = b.rating || 0;
    return bRating - aRating;
  });

  const products = allProducts.slice(0, maxProducts);
  const productsFound = products.length;

  let response = `üîç –ù–∞–π–¥–µ–Ω–æ ${productsFound} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}":\n\n`;
  
  if (products.length > 0) {
    response += `üì¶ –¢–æ–ø —Ç–æ–≤–∞—Ä—ã:\n`;
    products.slice(0, 5).forEach((product, index) => {
      response += `${index + 1}. ${product.title}\n`;
      response += `   üí∞ –¶–µ–Ω–∞: ${product.price} ${product.currency}\n`;
      if (product.rating) {
        response += `   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${product.rating}/5\n`;
      }
      response += `   üè™ –ò—Å—Ç–æ—á–Ω–∏–∫: ${product.source}\n\n`;
    });

    if (products.length > 5) {
      response += `... –∏ –µ—â–µ ${products.length - 5} —Ç–æ–≤–∞—Ä–æ–≤\n`;
    }
  } else {
    response += `üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.`;
  }

  return { response, products, sourcesUsed, productsFound };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
async function handleAnalysis(message: string, context?: any, options?: any) {
  const searchQuery = extractSearchQuery(message);
  const maxProducts = options?.maxProducts || 50;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  let products = productDatabase.searchProducts(searchQuery, { maxResults: maxProducts });
  
  if (products.length === 0) {
    // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ —Å–∫—Ä–∞–ø–µ—Ä
    try {
      const scrapedResults = await webScraper.scrapeProducts(searchQuery, ['wildberries', 'ozon']);
      products = scrapedResults.flatMap(result => result.products || []);
      productDatabase.addProducts(products);
    } catch (error) {
      console.error('Error scraping products for analysis:', error);
    }
  }

  if (products.length === 0) {
    return {
      response: `üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.`,
      analysis: null,
      sourcesUsed: [],
      productsFound: 0
    };
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é –ò–ò
  const analysis = await aiAnalyzer.analyzeProducts(products, searchQuery);
  
  let response = `üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}":\n\n`;
  response += `üìã ${analysis.summary}\n\n`;
  
  if (analysis.insights.length > 0) {
    response += `üí° –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:\n`;
    analysis.insights.forEach(insight => {
      response += `‚Ä¢ ${insight}\n`;
    });
    response += `\n`;
  }

  if (analysis.recommendations.length > 0) {
    response += `üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n`;
    analysis.recommendations.forEach(rec => {
      response += `‚Ä¢ ${rec}\n`;
    });
    response += `\n`;
  }

  response += `üí∞ –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω:\n`;
  response += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${analysis.priceAnalysis.averagePrice} ‚ÇΩ\n`;
  response += `‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: ${analysis.priceAnalysis.priceRange}\n`;
  response += `‚Ä¢ –õ—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: ${analysis.priceAnalysis.bestValue}\n\n`;

  response += `‚≠ê –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞:\n`;
  response += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${analysis.qualityAnalysis.averageRating}/5\n`;
  response += `‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${analysis.qualityAnalysis.ratingDistribution}\n`;

  const sourcesUsed = [...new Set(products.map(p => p.source))];
  const productsFound = products.length;

  return { response, analysis, sourcesUsed, productsFound };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async function handleRecommendations(message: string, context?: any, options?: any) {
  const searchQuery = extractSearchQuery(message);
  const maxProducts = options?.maxProducts || 30;
  const userPreferences = context?.userPreferences;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  let products = productDatabase.searchProducts(searchQuery, { maxResults: maxProducts });
  
  if (products.length === 0) {
    try {
      const scrapedResults = await webScraper.scrapeProducts(searchQuery, ['wildberries', 'ozon']);
      products = scrapedResults.flatMap(result => result.products || []);
      productDatabase.addProducts(products);
    } catch (error) {
      console.error('Error scraping products for recommendations:', error);
    }
  }

  if (products.length === 0) {
    return {
      response: `üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.`,
      recommendations: null,
      sourcesUsed: [],
      productsFound: 0
    };
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò
  const recommendations = await aiAnalyzer.generateRecommendations(products, searchQuery, userPreferences);
  
  let response = `üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞ "${searchQuery}":\n\n`;
  response += `üìù ${recommendations.reasoning}\n\n`;
  
  response += `üèÜ –õ—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n`;
  recommendations.products.forEach((product, index) => {
    response += `${index + 1}. ${product.title}\n`;
    response += `   üí∞ –¶–µ–Ω–∞: ${product.price} ${product.currency}\n`;
    if (product.rating) {
      response += `   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${product.rating}/5\n`;
    }
    response += `   üè™ –ò—Å—Ç–æ—á–Ω–∏–∫: ${product.source}\n\n`;
  });

  if (recommendations.alternatives.length > 0) {
    response += `üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:\n`;
    recommendations.alternatives.forEach(alt => {
      response += `‚Ä¢ ${alt}\n`;
    });
    response += `\n`;
  }

  response += `üí∞ ${recommendations.priceComparison}`;

  const sourcesUsed = [...new Set(products.map(p => p.source))];
  const productsFound = products.length;

  return { response, recommendations, sourcesUsed, productsFound };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
async function handleComparison(message: string, context?: any, options?: any) {
  const searchQuery = extractSearchQuery(message);
  const maxProducts = options?.maxProducts || 20;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const sources = ['wildberries', 'ozon'];
  let allProducts: any[] = [];

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    const scrapedResults = await webScraper.scrapeProducts(searchQuery, sources);
    for (const result of scrapedResults) {
      if (result.products) {
        productDatabase.addProducts(result.products);
        allProducts.push(...result.products);
      }
    }
  } catch (error) {
    console.error('Error scraping products for comparison:', error);
  }

  if (allProducts.length === 0) {
    return {
      response: `üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.`,
      comparison: null,
      sourcesUsed: [],
      productsFound: 0
    };
  }

  // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
  const wildberriesProducts = allProducts.filter(p => p.source === 'wildberries');
  const ozonProducts = allProducts.filter(p => p.source === 'ozon');

  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–æ–º–æ—â—å—é –ò–ò
  const comparison = await aiAnalyzer.compareSources(
    wildberriesProducts, 
    ozonProducts, 
    'Wildberries', 
    'Ozon'
  );

  let response = `‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}":\n\n`;
  
  response += `üè™ Wildberries:\n`;
  response += `‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: ${comparison.source1.products.length}\n`;
  response += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(comparison.source1.averagePrice)} ‚ÇΩ\n`;
  response += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${comparison.source1.averageRating.toFixed(1)}/5\n\n`;

  response += `üè™ Ozon:\n`;
  response += `‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: ${comparison.source2.products.length}\n`;
  response += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(comparison.source2.averagePrice)} ‚ÇΩ\n`;
  response += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${comparison.source2.averageRating.toFixed(1)}/5\n\n`;

  response += `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ —Ü–µ–Ω–µ: ${comparison.winner}\n`;
  response += `üí∞ –†–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–∞—Ö: ${Math.round(comparison.priceDifference)} ‚ÇΩ\n`;
  response += `‚≠ê –†–∞–∑–Ω–∏—Ü–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ: ${comparison.qualityDifference.toFixed(1)} –±–∞–ª–ª–æ–≤\n\n`;

  response += `üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n`;
  comparison.recommendations.forEach(rec => {
    response += `‚Ä¢ ${rec}\n`;
  });

  const sourcesUsed = ['wildberries', 'ozon'];
  const productsFound = allProducts.length;

  return { response, comparison, sourcesUsed, productsFound };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞
async function handleChat(message: string, context?: any) {
  if (!openai) {
    return {
      response: `–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–æ–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "–Ω–∞–π–¥–∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã" –∏–ª–∏ "–∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω –Ω–∞ –Ω–æ—É—Ç–±—É–∫–∏".`
    };
  }

  try {
    const response = await openai.chat.completions.create({
      model: DEFAULT_MODEL,
      messages: [
        {
          role: 'system',
          content: `–¢—ã –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö. –¢—ã –º–æ–∂–µ—à—å:
- –ò—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ Wildberries, Ozon –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö
- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏
- –î–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É
- –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã, –ø—Ä–µ–¥–ª–æ–∂–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫.`
        },
        {
          role: 'user',
          content: message
        }
      ],
      temperature: 0.7,
      max_tokens: 500
    });

    return {
      response: response.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.'
    };
  } catch (error) {
    console.error('Error in chat:', error);
    return {
      response: `–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–æ–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "–Ω–∞–π–¥–∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã" –∏–ª–∏ "–∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω –Ω–∞ –Ω–æ—É—Ç–±—É–∫–∏".`
    };
  }
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
function extractSearchQuery(message: string): string {
  // –£–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º –∑–∞–ø—Ä–æ—Å
  const searchKeywords = ['–Ω–∞–π–¥–∏', '–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–∏—â–∏', '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', '–∞–Ω–∞–ª–∏–∑', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '–ø–æ—Å–æ–≤–µ—Ç—É–π', '—Å—Ä–∞–≤–Ω–∏', '—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ'];
  
  let query = message.toLowerCase();
  for (const keyword of searchKeywords) {
    query = query.replace(new RegExp(keyword, 'gi'), '').trim();
  }
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
  query = query.replace(/[^\w\s–∞-—è—ë]/gi, ' ').trim();
  
  return query || '—Ç–æ–≤–∞—Ä—ã';
}
