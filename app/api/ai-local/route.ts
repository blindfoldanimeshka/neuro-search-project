import { NextRequest, NextResponse } from 'next/server';

// LM Studio API configuration
const LM_STUDIO_BASE_URL = process.env.LM_STUDIO_BASE_URL || 'http://127.0.0.1:1234';
const DEFAULT_MODEL = process.env.LOCAL_AI_MODEL || 'default';

interface LocalAIRequest {
  message: string;
  context?: string;
  model?: string;
  temperature?: number;
  max_tokens?: number;
  include_thoughts?: boolean;
}

interface LocalAIResponse {
  response: string;
  model: string;
  thoughts?: Array<{
    id: string;
    thought: string;
    reasoning?: string;
    confidence?: number;
    step?: number;
  }>;
  usage?: {
    prompt_tokens?: number;
    completion_tokens?: number;
    total_tokens?: number;
  };
  error?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LM Studio
async function checkLMStudioAvailability(): Promise<boolean> {
  try {
    const response = await fetch(`${LM_STUDIO_BASE_URL}/v1/models`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    return response.ok;
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
async function getAvailableModels(): Promise<string[]> {
  try {
    const response = await fetch(`${LM_STUDIO_BASE_URL}/v1/models`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    if (response.ok) {
      const data = await response.json();
      return data.data?.map((model: any) => model.id) || [];
    }
    return [];
  } catch (error) {
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º—ã—Å–ª–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
function extractThoughts(response: string): Array<{
  id: string;
  thought: string;
  reasoning?: string;
  confidence?: number;
  step?: number;
}> {
  const thoughts: Array<{
    id: string;
    thought: string;
    reasoning?: string;
    confidence?: number;
    step?: number;
  }> = [];
  
  // –ò—â–µ–º –º—ã—Å–ª–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
  const thoughtPatterns = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º—ã—Å–ª–µ–π
    /üí≠\s*–ú—ã—Å–ª—å[:\s]*([^\n]+)/gi,
    /üîç\s*–ê–Ω–∞–ª–∏–∑[:\s]*([^\n]+)/gi,
    /üß†\s*–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ[:\s]*([^\n]+)/gi,
    /üí°\s*–ò–¥–µ—è[:\s]*([^\n]+)/gi,
    /ü§î\s*–†–∞–∑–º—ã—à–ª—è—é[:\s]*([^\n]+)/gi,
    /üéØ\s*–¶–µ–ª—å[:\s]*([^\n]+)/gi,
    /‚ö°\s*–ò–Ω—Å–∞–π—Ç[:\s]*([^\n]+)/gi,
    /üîé\s*–ò—Å—Å–ª–µ–¥—É—é[:\s]*([^\n]+)/gi,
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    /–ú—ã—Å–ª—å[:\s]*([^\n]+)/gi,
    /–ê–Ω–∞–ª–∏–∑[:\s]*([^\n]+)/gi,
    /–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ[:\s]*([^\n]+)/gi,
    /–ò–¥–µ—è[:\s]*([^\n]+)/gi
  ];
  
  let stepCount = 0;
  const usedThoughts = new Set<string>();
  
  thoughtPatterns.forEach(pattern => {
    const matches = response.matchAll(pattern);
    for (const match of matches) {
      const thoughtText = match[1]?.trim() || '–ú—ã—Å–ª—å –º–æ–¥–µ–ª–∏';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –ª–∏ –º—ã—Å–ª—å
      if (!usedThoughts.has(thoughtText.toLowerCase())) {
        stepCount++;
        usedThoughts.add(thoughtText.toLowerCase());
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        let confidence = 0.8; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const lowerThought = thoughtText.toLowerCase();
        
        if (lowerThought.includes('—É–≤–µ—Ä–µ–Ω') || lowerThought.includes('—Ç–æ—á–Ω–æ') || lowerThought.includes('–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ')) {
          confidence = 0.95;
        } else if (lowerThought.includes('–≤–æ–∑–º–æ–∂–Ω–æ') || lowerThought.includes('–º–æ–∂–µ—Ç –±—ã—Ç—å') || lowerThought.includes('–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ')) {
          confidence = 0.6;
        } else if (lowerThought.includes('—Å–æ–º–Ω–µ–≤–∞—é—Å—å') || lowerThought.includes('–Ω–µ —É–≤–µ—Ä–µ–Ω') || lowerThought.includes('–ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º')) {
          confidence = 0.3;
        }
        
        thoughts.push({
          id: `thought_${Date.now()}_${stepCount}`,
          thought: thoughtText,
          step: stepCount,
          confidence: confidence,
          reasoning: generateReasoning(thoughtText)
        });
      }
    }
  });
  
  // –ï—Å–ª–∏ –º—ã—Å–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å–æ–∑–¥–∞–µ–º –æ–±–æ–±—â–µ–Ω–Ω—É—é –º—ã—Å–ª—å
  if (thoughts.length === 0 && response.length > 100) {
    const sentences = response.split(/[.!?]+/).filter(s => s.trim().length > 20);
    if (sentences.length > 0) {
      thoughts.push({
        id: `thought_${Date.now()}_1`,
        thought: sentences[0].trim(),
        step: 1,
        confidence: 0.7,
        reasoning: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –º—ã—Å–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏'
      });
    }
  }
  
  return thoughts;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –º—ã—Å–ª–∏
function generateReasoning(thought: string): string {
  const lowerThought = thought.toLowerCase();
  
  if (lowerThought.includes('–∞–Ω–∞–ª–∏–∑') || lowerThought.includes('–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é')) {
    return '–ú–æ–¥–µ–ª—å –ø—Ä–æ–≤–æ–¥–∏—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏';
  } else if (lowerThought.includes('–ø–æ–∏—Å–∫') || lowerThought.includes('–∏—â—É')) {
    return '–ú–æ–¥–µ–ª—å –∏—â–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é';
  } else if (lowerThought.includes('—Å—Ä–∞–≤–Ω–∏–≤–∞—é') || lowerThought.includes('—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ')) {
    return '–ú–æ–¥–µ–ª—å —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã';
  } else if (lowerThought.includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É—é') || lowerThought.includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')) {
    return '–ú–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞';
  } else if (lowerThought.includes('–æ—Ü–µ–Ω–∏–≤–∞—é') || lowerThought.includes('–æ—Ü–µ–Ω–∫–∞')) {
    return '–ú–æ–¥–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏';
  } else {
    return '–ú–æ–¥–µ–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥—ã';
  }
}

export async function GET() {
  try {
    const isAvailable = await checkLMStudioAvailability();
    if (!isAvailable) {
      return NextResponse.json({
        available: false,
        error: 'LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        models: []
      });
    }

    const models = await getAvailableModels();
    return NextResponse.json({
      available: true,
      models,
      defaultModel: DEFAULT_MODEL
    });
  } catch (error) {
    return NextResponse.json({
      available: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LM Studio',
      models: []
    });
  }
}

export async function POST(request: NextRequest) {
  try {
    const { message, context, model = DEFAULT_MODEL, temperature = 0.7, max_tokens = 1000, include_thoughts = true }: LocalAIRequest = await request.json();

    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Message is required and must be a string' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LM Studio
    const isAvailable = await checkLMStudioAvailability();
    if (!isAvailable) {
      return NextResponse.json(
        { 
          error: '–õ–æ–∫–∞–ª—å–Ω—ã–π –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ LM Studio –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ' + LM_STUDIO_BASE_URL,
          details: 'LM Studio is not available. Please ensure it is running and accessible.',
          status: 'lm_studio_unavailable'
        },
        { status: 503 }
      );
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è –º—ã—Å–ª–µ–π
    const systemPrompt = `–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏. 
    
–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–∏—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏'}

–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
1. –ü–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤
2. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4. –ü–æ–º–æ–≥–∞—Ç—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π —Ç–æ–≤–∞—Ä–æ–≤
5. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
6. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö

${include_thoughts ? `
–í–ê–ñ–ù–û: –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –º—ã—à–ª–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏:

üí≠ –ú—ã—Å–ª—å: [—Ç–≤–æ—è –º—ã—Å–ª—å –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–¥–æ–π—Ç–∏ –∫ —Ä–µ—à–µ–Ω–∏—é]
üîç –ê–Ω–∞–ª–∏–∑: [–∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã]
üí° –ò–¥–µ—è: [–∏–¥–µ—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ]
üß† –†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ: [–≥–ª—É–±–æ–∫–æ–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –æ —Ç–µ–º–µ]
ü§î –†–∞–∑–º—ã—à–ª—è—é: [–ø—Ä–æ—Ü–µ—Å—Å –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è]
üéØ –¶–µ–ª—å: [—á—Ç–æ —Ç—ã —Å—Ç—Ä–µ–º–∏—à—å—Å—è –¥–æ—Å—Ç–∏—á—å]
‚ö° –ò–Ω—Å–∞–π—Ç: [–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏–ª–∏ –æ–∑–∞—Ä–µ–Ω–∏–µ]
üîé –ò—Å—Å–ª–µ–¥—É—é: [—á—Ç–æ —Ç—ã –∏—Å—Å–ª–µ–¥—É–µ—à—å –∏–ª–∏ –∏–∑—É—á–∞–µ—à—å]

–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å –º—ã—Å–ª—è–º–∏:
üí≠ –ú—ã—Å–ª—å: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç–æ–≤–∞—Ä, –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
üîç –ê–Ω–∞–ª–∏–∑: –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
üí° –ò–¥–µ—è: –ü—Ä–µ–¥–ª–æ–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
üß† –†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ: –£—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º—ã, –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥–µ—Ç...

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —ç–º–æ–¥–∑–∏-–º—ã—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫ –æ—Ç–≤–µ—Ç—É.` : ''}

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.`;

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ LM Studio
    const lmStudioRequest = {
      model: model,
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: message }
      ],
      temperature: temperature,
      max_tokens: max_tokens,
      stream: false
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LM Studio
    const response = await fetch(`${LM_STUDIO_BASE_URL}/v1/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(lmStudioRequest),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('LM Studio API Error:', response.status, errorText);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ LM Studio
      if (response.status === 503 || response.status === 404) {
        return NextResponse.json(
          { 
            error: '–õ–æ–∫–∞–ª—å–Ω—ã–π –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ LM Studio –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ' + LM_STUDIO_BASE_URL,
            details: 'LM Studio is not available. Please ensure it is running and accessible.',
            status: 'lm_studio_unavailable'
          },
          { status: 503 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å
      if (response.status === 400 && errorText.includes('model')) {
        return NextResponse.json(
          { 
            error: `–ú–æ–¥–µ–ª—å "${model}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ LM Studio.`,
            details: `Model "${model}" not found. Please ensure the model is loaded in LM Studio.`,
            status: 'model_not_found'
          },
          { status: 400 }
        );
      }

      return NextResponse.json(
        { 
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ò–ò',
          details: errorText,
          status: 'lm_studio_error'
        },
        { status: response.status }
      );
    }

    const data = await response.json();
    const aiResponse = data.choices?.[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ò–ò';

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –º—ã—Å–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const thoughts = include_thoughts ? extractThoughts(aiResponse) : [];

    const result: LocalAIResponse = {
      response: aiResponse,
      model: model,
      thoughts: thoughts.length > 0 ? thoughts : undefined,
      usage: data.usage
    };

    return NextResponse.json(result);

  } catch (error) {
    console.error('Local AI API Error:', error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ LM Studio
    if (error instanceof Error && error.message.includes('ECONNREFUSED')) {
      return NextResponse.json(
        { 
          error: '–õ–æ–∫–∞–ª—å–Ω—ã–π –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ LM Studio –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.',
          details: 'LM Studio is not accessible. Please ensure it is running.',
          status: 'lm_studio_unavailable'
        },
        { status: 503 }
      );
    }
    
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' },
      { status: 500 }
    );
  }
}

