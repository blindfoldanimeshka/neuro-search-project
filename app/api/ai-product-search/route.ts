import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import { WebScraper } from '../../lib/web-scraper';
import { SearchFilters } from '../../lib/external-apis';
import { Product } from '../../components/types';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è OpenRouter
const openai = process.env.OPENROUTER_API_KEY ? new OpenAI({
  apiKey: process.env.OPENROUTER_API_KEY,
  baseURL: 'https://openrouter.ai/api/v1',
}) : null;

// –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_MODEL = process.env.DEFAULT_AI_MODEL || 'deepseek/deepseek-chat-v3-0324:free';

export async function POST(request: NextRequest) {
  try {
    const { message, model = DEFAULT_MODEL, context, searchType = 'all' } = await request.json();

    if (!process.env.OPENROUTER_API_KEY || !openai) {
      return NextResponse.json(
        { error: 'OpenRouter API key not configured. Please create .env.local file with OPENROUTER_API_KEY' },
        { status: 500 }
      );
    }

    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Message is required and must be a string' },
        { status: 400 }
      );
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    const searchQuery = extractSearchQuery(message);
    
    if (!searchQuery) {
      return NextResponse.json({
        response: 'üîç **AI –ü–æ–∏—Å–∫ –¢–æ–≤–∞—Ä–æ–≤**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤—ã –∏—â–µ—Ç–µ. –ù–∞–ø—Ä–∏–º–µ—Ä:\n‚Ä¢ "–ù–∞–π–¥–∏ iPhone 15"\n‚Ä¢ "–ü–æ–∏—Å–∫ –Ω–æ—É—Ç–±—É–∫–∞ Dell"\n‚Ä¢ "–ö—É–ø–∏—Ç—å —Ç—Ä–∞–∫—Ç–æ—Ä –ú–¢–ó"\n‚Ä¢ "–°—Ä–∞–≤–Ω–∏ —Ü–µ–Ω—ã –Ω–∞ Samsung Galaxy"\n‚Ä¢ "–ì–æ—Å–∑–∞–∫—É–ø–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã"\n‚Ä¢ "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã"\n‚Ä¢ "–ß–∞—Å—Ç–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"',
        source: 'product_search',
        model: 'product-search-ai'
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
    const category = determineSearchCategory(message);
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    const filters: SearchFilters = {
      query: searchQuery,
      category: category,
      minPrice: extractMinPrice(message),
      maxPrice: extractMaxPrice(message),
      rating: extractMinRating(message),
      location: extractLocation(message)
    };

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
    const scraper = new WebScraper();
    const searchResults: Product[] = [];

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º scraper
      await scraper.initialize();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
      let sources: string[] = [];
      
      if (searchType === 'all' || searchType === 'marketplaces') {
        sources = ['wildberries', 'ozon', 'yandex', 'sbermegamarket'];
      } else if (searchType === 'private') {
        sources = ['avito', 'youla'];
      } else if (searchType === 'goszakupki') {
        sources = ['government'];
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
      const results = await scraper.scrapeProducts(searchQuery, sources);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      results.forEach(result => {
        if (result.success && result.products) {
          searchResults.push(...result.products.map(product => ({
            id: product.id,
            name: product.title,
            price: product.price,
            originalPrice: product.originalPrice,
            rating: product.rating,
            reviews: product.reviewsCount,
            seller: '–ù–µ —É–∫–∞–∑–∞–Ω',
            source: product.source,
            url: product.url,
            image: product.image,
            description: product.description,
            category: product.category,
            subcategory: '',
            availability: product.availability
          })));
        }
      });
    } catch (error) {
      console.error('Search error:', error);
    } finally {
      await scraper.close();
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é AI
    let aiAnalysis = '';

    if (searchResults.length > 0) {
      const analysisPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

–¢–æ–≤–∞—Ä—ã:
${searchResults.slice(0, 10).map((product, index) => 
  `${index + 1}. ${product.name} - ${product.price}‚ÇΩ (${product.source})
   –†–µ–π—Ç–∏–Ω–≥: ${product.rating}/5, –û—Ç–∑—ã–≤–æ–≤: ${product.reviews}
   –ü—Ä–æ–¥–∞–≤–µ—Ü: ${product.seller}, –î–æ—Å—Ç–∞–≤–∫–∞: ${product.deliveryTime}`
).join('\n')}

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${message}"

–î–∞–π –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
1. **–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞** (—Ü–µ–Ω—ã, –∫–∞—á–µ—Å—Ç–≤–æ, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å)
2. **–¢–æ–ø-3 –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è** —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
3. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–∫—É–ø–∫–µ** (–∫–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç—å, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ)
4. **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã** (–µ—Å–ª–∏ –µ—Å—Ç—å)

–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.`;

      try {
        const aiResponse = await openai.chat.completions.create({
          model: model,
          messages: [
            { role: 'system', content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–∫—É–ø–∫–∞–º. –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä.' },
            { role: 'user', content: analysisPrompt }
          ],
          temperature: 0.7,
          max_tokens: 1500,
        });

        aiAnalysis = aiResponse.choices[0]?.message?.content || '';
      } catch (error) {
        console.error('AI analysis error:', error);
        aiAnalysis = '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.';
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    let response = `üîç **AI –ü–æ–∏—Å–∫ –¢–æ–≤–∞—Ä–æ–≤: "${searchQuery}"**\n\n`;

    if (searchResults.length > 0) {
      response += `‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${searchResults.length}\n\n`;
      response += aiAnalysis;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
      response += '\n\n**üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n';
      searchResults.slice(0, 5).forEach((product, index) => {
        response += `${index + 1}. **${product.name}** - ${product.price}‚ÇΩ\n`;
        response += `   üìç ${product.source} | ‚≠ê ${product.rating}/5 | üöö ${product.deliveryTime}\n\n`;
      });
    } else {
      response += `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n`;
      response += `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n`;
      response += `‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n`;
      response += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –æ–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n`;
      response += `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n`;
      response += `‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö`;
    }

    return NextResponse.json({
      response: response,
      source: 'product_search',
      products: searchResults,
      searchQuery: searchQuery,
      category: category,
      model: 'product-search-ai'
    });

  } catch (error) {
    console.error('Product Search API Error:', error);
    
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' },
      { status: 500 }
    );
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function extractSearchQuery(message: string): string | null {
  const searchKeywords = ['–Ω–∞–π–¥–∏', '–ø–æ–∏—Å–∫', '–∏—â–∏', '–Ω–∞–π—Ç–∏', '–ø–æ–∫–∞–∂–∏', '–∫—É–ø–∏—Ç—å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å—Ä–∞–≤–Ω–∏', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'];
  const hasSearchKeyword = searchKeywords.some(keyword => 
    message.toLowerCase().includes(keyword)
  );
  
  if (!hasSearchKeyword) return null;
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  for (const keyword of searchKeywords) {
    if (message.toLowerCase().includes(keyword)) {
      const afterKeyword = message.toLowerCase().split(keyword)[1];
      if (afterKeyword) {
        return afterKeyword.trim().split(' ').slice(0, 5).join(' '); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤
      }
    }
  }
  
  return null;
}

function determineSearchCategory(message: string): string {
  const lowerMessage = message.toLowerCase();
  
  if (lowerMessage.includes('–≥–æ—Å–∑–∞–∫—É–ø–∫–∏') || lowerMessage.includes('—Ç–µ–Ω–¥–µ—Ä—ã')) {
    return 'goszakupki';
  }
  if (lowerMessage.includes('–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å') || lowerMessage.includes('wildberries') || 
      lowerMessage.includes('ozon') || lowerMessage.includes('—è–Ω–¥–µ–∫—Å')) {
    return 'marketplaces';
  }
  if (lowerMessage.includes('—á–∞—Å—Ç–Ω—ã–µ') || lowerMessage.includes('–∞–≤–∏—Ç–æ') || 
      lowerMessage.includes('—é–ª–∞') || lowerMessage.includes('–∏–∑ —Ä—É–∫ –≤ —Ä—É–∫–∏')) {
    return 'private';
  }
  
  return 'all';
}

function extractMinPrice(message: string): number | undefined {
  const match = message.match(/–æ—Ç\s*(\d+)/i);
  return match ? parseInt(match[1]) : undefined;
}

function extractMaxPrice(message: string): number | undefined {
  const match = message.match(/–¥–æ\s*(\d+)/i);
  return match ? parseInt(match[1]) : undefined;
}

function extractMinRating(message: string): number | undefined {
  const match = message.match(/—Ä–µ–π—Ç–∏–Ω–≥\s*(\d+)/i);
  return match ? parseInt(match[1]) : undefined;
}

function extractLocation(message: string): string | undefined {
  const locations = ['–º–æ—Å–∫–≤–∞', '—Å–ø–±', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'];
  const lowerMessage = message.toLowerCase();
  
  for (const location of locations) {
    if (lowerMessage.includes(location)) {
      return location;
    }
  }
  
  return undefined;
} 