'use client';

import React, { useState, useRef, useEffect } from 'react';
import { Brain, Bot, Send, Search, Sparkles, Loader2 } from 'lucide-react';
import { useAI } from '../hooks/useAI';
import { Product, Filters, AIMessage } from './types';
import NeuroParserResults from './NeuroParserResults';

interface AIChatSidebarEnhancedProps {
  isDarkTheme: boolean;
  selectedProducts?: Product[];
  filteredProducts?: Product[];
  filters?: Filters;
  onProductsFound?: (products: any[]) => void;
}

interface NeuroParserData {
  products: any[];
  summary: string;
  query: string;
  sourcesUsed: string[];
  totalFound: number;
  filteredCount: number;
}

export default function AIChatSidebarEnhanced({
  isDarkTheme,
  selectedProducts = [],
  filteredProducts = [],
  filters = {},
  onProductsFound
}: AIChatSidebarEnhancedProps) {
  const [aiMessages, setAiMessages] = useState<AIMessage[]>([]);
  const [aiInputMessage, setAiInputMessage] = useState('');
  const [neuroParserData, setNeuroParserData] = useState<NeuroParserData | null>(null);
  const [isNeuroParserLoading, setIsNeuroParserLoading] = useState(false);
  const aiMessagesEndRef = useRef<HTMLDivElement>(null);

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
  const aiContext = `
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä–æ–º.
    –í—ã–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${selectedProducts?.length || 0}
    –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${filteredProducts?.length || 0}
    –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: ${JSON.stringify(filters || {})}
    
    –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
    - –ù–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (Wildberries, Ozon)
    - –ò–ò –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Ü–µ–Ω–∫–æ–π –ø–ª—é—Å–æ–≤ –∏ –º–∏–Ω—É—Å–æ–≤
    - –£–º–Ω–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–ª–æ—â–∞–¥–∫–∞–º–∏
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–∫—É–ø–∫–∞–º
    - –ü–æ–º–æ—â—å —Å –≥–æ—Å–∑–∞–∫—É–ø–∫–∞–º–∏
    - –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤
  `;

  const { sendMessage: sendAIMessage, isLoading: isAILoading } = useAI({ context: aiContext });

  const scrollToBottom = () => {
    aiMessagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [aiMessages, neuroParserData]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –Ω–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä–∞
  const callNeuroParser = async (query: string, userPrompt?: string) => {
    setIsNeuroParserLoading(true);
    try {
      const response = await fetch('/api/ai-neuro-parser', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query,
          userPrompt,
          sources: ['wildberries', 'ozon'],
          maxProducts: 20,
          includeAnalysis: true,
          saveToDatabase: true,
          context: {
            previousProducts: selectedProducts || [],
            searchHistory: (aiMessages || []).map(m => m.content),
            userPreferences: filters || {}
          }
        })
      });

      if (!response.ok) {
        throw new Error(`Neuro parser error: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success) {
        setNeuroParserData(result.data);
        onProductsFound?.(result.data.products);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –Ω–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä–∞
        const neuroMessage: AIMessage = {
          id: Date.now().toString(),
          role: 'assistant',
          content: `üß† **–ù–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –ø–æ–∏—Å–∫!**\n\n${result.data.summary}\n\n–ù–∞–π–¥–µ–Ω–æ: ${result.data.totalFound} —Ç–æ–≤–∞—Ä–æ–≤\n–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: ${result.data.filteredCount} —Ç–æ–≤–∞—Ä–æ–≤\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏: ${(result.data.sourcesUsed || []).join(', ')}`,
          timestamp: new Date(),
          type: 'neuro-parser'
        };
        
        setAiMessages(prev => [...prev, neuroMessage]);
      }
    } catch (error) {
      console.error('Error calling neuro parser:', error);
      
      const errorMessage: AIMessage = {
        id: Date.now().toString(),
        role: 'assistant',
        content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –Ω–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫.',
        timestamp: new Date(),
      };
      
      setAiMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsNeuroParserLoading(false);
    }
  };

  const handleSendAIMessage = async () => {
    if (!aiInputMessage.trim() || isAILoading || isNeuroParserLoading) return;

    const userMessage: AIMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: aiInputMessage,
      timestamp: new Date(),
    };

    setAiMessages(prev => [...prev, userMessage]);
    const currentMessage = aiInputMessage;
    setAiInputMessage('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä
    const shouldUseNeuroParser = detectSearchIntent(currentMessage);
    
    if (shouldUseNeuroParser) {
      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –Ω–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä–∞
      const loadingMessage: AIMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: 'üß† –ó–∞–ø—É—Å–∫–∞—é –Ω–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...',
        timestamp: new Date(),
      };
      
      setAiMessages(prev => [...prev, loadingMessage]);
      
      // –í—ã–∑—ã–≤–∞–µ–º –Ω–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä
      await callNeuroParser(extractSearchQuery(currentMessage), currentMessage);
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ò–ò —á–∞—Ç
      try {
        const response = await sendAIMessage(currentMessage);
        
        const assistantMessage: AIMessage = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: response.response,
          timestamp: new Date(),
        };

        setAiMessages(prev => [...prev, assistantMessage]);
      } catch {
        const errorMessage: AIMessage = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          timestamp: new Date(),
        };

        setAiMessages(prev => [...prev, errorMessage]);
      }
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
  const detectSearchIntent = (message: string): boolean => {
    const lowerMessage = message.toLowerCase();
    const searchKeywords = [
      '–Ω–∞–π–¥–∏', '–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–∏—â–∏', '–∏—â—É', '–ø–æ–∫–∞–∂–∏', '–Ω–∞–π–¥–∏ —Ç–æ–≤–∞—Ä—ã',
      '–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤', '–∏—â—É —Ç–æ–≤–∞—Ä—ã', '–ø–æ–∫–∞–∂–∏ —Ç–æ–≤–∞—Ä—ã', '–Ω–∞–π–¥–∏ –ø—Ä–æ–¥—É–∫—Ç—ã',
      '–ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', '–∏—â—É –ø—Ä–æ–¥—É–∫—Ç—ã', '–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–¥—É–∫—Ç—ã'
    ];
    
    return searchKeywords.some(keyword => lowerMessage.includes(keyword));
  };

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const extractSearchQuery = (message: string): string => {
    const searchKeywords = [
      '–Ω–∞–π–¥–∏', '–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–∏—â–∏', '–∏—â—É', '–ø–æ–∫–∞–∂–∏', '—Ç–æ–≤–∞—Ä—ã', '–ø—Ä–æ–¥—É–∫—Ç—ã'
    ];
    
    let query = message.toLowerCase();
    for (const keyword of searchKeywords) {
      query = query.replace(new RegExp(keyword, 'gi'), '').trim();
    }
    
    query = query.replace(/[^\w\s–∞-—è—ë]/gi, ' ').trim();
    
    return query || '—Ç–æ–≤–∞—Ä—ã';
  };

  const handleAIKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendAIMessage();
    }
  };

  const clearAIChat = () => {
    setAiMessages([]);
    setNeuroParserData(null);
  };

  const suggestedQuestions: string[] = [
    '–ù–∞–π–¥–∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã',
    '–ü–æ–∫–∞–∂–∏ –Ω–æ—É—Ç–±—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã',
    '–ò—â—É –∫—Ä–æ—Å—Å–æ–≤–∫–∏',
    '–ù–∞–π–¥–∏ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
    '–ü–æ–∫–∞–∂–∏ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
    '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã',
    '–ü—Ä–µ–¥–ª–æ–∂–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã',
    '–ü–æ–º–æ–≥–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π',
    '–°—Ä–∞–≤–Ω–∏ —Ü–µ–Ω—ã –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞—Ö',
    '–ü–æ–º–æ–≥–∏ —Å –≥–æ—Å–∑–∞–∫—É–ø–∫–∞–º–∏',
    '–†–µ–∫–æ–º–µ–Ω–¥—É–π –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
    '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä—ã–Ω–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤',
  ];

  return (
    <div className={`p-3 shadow-sm border flex-1 flex flex-col ${
      isDarkTheme 
        ? 'bg-gray-800 border-gray-700' 
        : 'bg-white border-gray-200'
    }`}>
      <div className="flex items-center mb-3">
        <Brain className={`mr-2 ${isDarkTheme ? 'text-blue-400' : 'text-blue-600'}`} size={16} />
        <h2 className={`text-base font-semibold ${isDarkTheme ? 'text-white' : 'text-slate-700'}`}>
          AI –ü–æ–º–æ—â–Ω–∏–∫ —Å –ù–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä–æ–º
        </h2>
        <Sparkles className={`ml-2 ${isDarkTheme ? 'text-purple-400' : 'text-purple-600'}`} size={14} />
      </div>
      
      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      <div className="flex-1 overflow-y-auto space-y-2 mb-3">
        {!aiMessages || aiMessages.length === 0 ? (
          <div className="text-center py-3">
            <Bot className={`mx-auto mb-2 ${isDarkTheme ? 'text-gray-400' : 'text-slate-400'}`} size={24} />
            <h4 className={`font-medium mb-1 text-sm ${isDarkTheme ? 'text-white' : 'text-slate-800'}`}>
              AI –ü–æ–º–æ—â–Ω–∏–∫ —Å –ù–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä–æ–º
            </h4>
            <p className={`text-xs mb-3 ${isDarkTheme ? 'text-gray-400' : 'text-slate-600'}`}>
              –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ
            </p>
            
            {/* –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã */}
            <div className="space-y-1">
              {(suggestedQuestions || []).slice(0, 6).map((question, index) => (
                <button
                  key={index}
                  onClick={() => setAiInputMessage(question)}
                  className={`w-full p-1.5 text-left text-xs transition-colors ${
                    isDarkTheme 
                      ? 'bg-gray-700 hover:bg-gray-600 text-gray-300' 
                      : 'bg-slate-100 hover:bg-slate-200 text-slate-700'
                  }`}
                >
                  {question}
                </button>
              ))}
            </div>
          </div>
        ) : (
          (aiMessages || []).map((message) => (
            <div
              key={message.id}
              className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-[85%] p-1.5 text-xs ${
                  message.role === 'user'
                    ? isDarkTheme
                      ? 'bg-blue-600 text-white'
                      : 'bg-blue-500 text-white'
                    : isDarkTheme
                      ? 'bg-gray-700 text-gray-200'
                      : 'bg-slate-100 text-slate-800'
                }`}
              >
                <p className="whitespace-pre-wrap">{message.content}</p>
                <p className={`text-xs mt-1 opacity-60 ${
                  message.role === 'user' ? 'text-blue-100' : 'text-gray-400'
                }`}>
                  {message.timestamp.toLocaleTimeString()}
                </p>
              </div>
            </div>
          ))
        )}
        
        {isAILoading && (
          <div className="flex justify-start">
            <div className={`max-w-[85%] p-1.5 text-xs ${
              isDarkTheme ? 'bg-gray-700' : 'bg-slate-100'
            }`}>
              <div className="flex items-center space-x-1">
                <div className="animate-spin h-2.5 w-2.5 border-b-2 border-blue-500"></div>
                <span className={`${isDarkTheme ? 'text-gray-300' : 'text-slate-600'}`}>
                  AI –¥—É–º–∞–µ—Ç...
                </span>
              </div>
            </div>
          </div>
        )}

        {isNeuroParserLoading && (
          <div className="flex justify-start">
            <div className={`max-w-[85%] p-1.5 text-xs ${
              isDarkTheme ? 'bg-gray-700' : 'bg-slate-100'
            }`}>
              <div className="flex items-center space-x-1">
                <Loader2 className="h-2.5 w-2.5 animate-spin text-purple-500" />
                <span className={`${isDarkTheme ? 'text-gray-300' : 'text-slate-600'}`}>
                  –ù–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä –∏—â–µ—Ç —Ç–æ–≤–∞—Ä—ã...
                </span>
              </div>
            </div>
          </div>
        )}
        
        <div ref={aiMessagesEndRef} />
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ–π—Ä–æ–ø–∞—Ä—Å–µ—Ä–∞ */}
      {neuroParserData && (
        <div className="mb-3">
          <NeuroParserResults
            products={neuroParserData.products || []}
            summary={neuroParserData.summary || ''}
            query={neuroParserData.query || ''}
            sourcesUsed={neuroParserData.sourcesUsed || []}
            totalFound={neuroParserData.totalFound || 0}
            filteredCount={neuroParserData.filteredCount || 0}
            onProductClick={(product) => {
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä—É
              console.log('Product clicked:', product);
            }}
          />
        </div>
      )}
      
      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
      <div className={`p-2 border-t ${
        isDarkTheme ? 'border-gray-700' : 'border-gray-200'
      }`}>
        <div className="flex space-x-1">
          <input
            type="text"
            value={aiInputMessage}
            onChange={(e) => setAiInputMessage(e.target.value)}
            onKeyPress={handleAIKeyPress}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫..."
            disabled={isAILoading || isNeuroParserLoading}
            className={`flex-1 p-1.5 border text-xs focus:outline-none focus:ring-1 transition-colors ${
              isDarkTheme 
                ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:ring-blue-500' 
                : 'bg-white border-slate-300 text-slate-900 placeholder-slate-400 focus:ring-blue-500'
            }`}
          />
          <button
            onClick={handleSendAIMessage}
            disabled={!aiInputMessage.trim() || isAILoading || isNeuroParserLoading}
            className={`p-1.5 transition-colors ${
              isDarkTheme 
                ? 'bg-blue-600 hover:bg-blue-700 text-white' 
                : 'bg-blue-500 hover:bg-blue-600 text-white'
            }`}
          >
            <Send size={12} />
          </button>
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞ */}
        {((aiMessages && aiMessages.length > 0) || neuroParserData) && (
          <button
            onClick={clearAIChat}
            className={`mt-1.5 text-xs px-1.5 py-0.5 rounded transition-colors ${
              isDarkTheme
                ? 'text-gray-400 hover:text-gray-300 hover:bg-gray-700'
                : 'text-slate-500 hover:text-slate-700 hover:bg-slate-200'
            }`}
          >
            –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç
          </button>
        )}
      </div>
    </div>
  );
}