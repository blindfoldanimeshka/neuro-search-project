import { useState, useCallback } from 'react';
import { ExternalProduct } from '../lib/external-apis';

interface AISearchResult {
  query: string;
  searchUrls: string[];
  products: ExternalProduct[];
  searchTime: number;
  indexedCount: number;
  aiAnalysis?: string;
  recommendations?: string[];
  category?: string;
  categoryName?: string;
}

interface CategorySearchResult {
  category: 'goszakupki' | 'marketplaces' | 'private' | 'all';
  query: string;
  products: ExternalProduct[];
  total: number;
  searchTime: number;
  categoryName: string;
}

interface UseAISearchReturn {
  searchWithAI: (query: string, filters?: Record<string, unknown>) => Promise<AISearchResult>;
  searchWithChat: (message: string) => Promise<AISearchResult>;
  searchByCategory: (query: string, category: 'goszakupki' | 'marketplaces' | 'private' | 'all') => Promise<CategorySearchResult>;
  isLoading: boolean;
  error: string | null;
  lastResult: AISearchResult | null;
  lastCategoryResult: CategorySearchResult | null;
  clearError: () => void;
}

export function useAISearch(): UseAISearchReturn {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastResult, setLastResult] = useState<AISearchResult | null>(null);
  const [lastCategoryResult, setLastCategoryResult] = useState<CategorySearchResult | null>(null);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  const searchWithAI = useCallback(async (query: string, filters: Record<string, unknown> = {}): Promise<AISearchResult> => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/search-external', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query, filters }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤');
      }

      const data = await response.json();
      const result: AISearchResult = {
        query: data.data.query || query,
        searchUrls: data.data.searchUrls || [],
        products: data.data.products || [],
        searchTime: data.data.searchTime || 0,
        indexedCount: data.data.indexedCount || 0,
      };

      setLastResult(result);
      return result;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      throw err;
    } finally {
      setIsLoading(false);
    }
  }, []);

  const searchWithChat = useCallback(async (message: string): Promise<AISearchResult> => {
    setIsLoading(true);
    setError(null);

    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      let searchQuery = message.trim();
      
      // –£–¥–∞–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–∏—Å–∫–∞
      const searchKeywords = ['–Ω–∞–π–¥–∏', '–ø–æ–∏—Å–∫', '–∏—â–∏', '–Ω–∞–π—Ç–∏', '–ø–æ–∫–∞–∂–∏', '—Å—Ä–∞–≤–Ω–∏', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '–∫—É–ø–∏—Ç—å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', '–≥–æ—Å–∑–∞–∫—É–ø–∫–∏', '—Ç–µ–Ω–¥–µ—Ä—ã', '—á–∞—Å—Ç–Ω—ã–µ'];
      for (const keyword of searchKeywords) {
        searchQuery = searchQuery.replace(new RegExp(keyword, 'gi'), '').trim();
      }

      if (!searchQuery) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
      let category = 'all';
      const lowerMessage = message.toLowerCase();
      if (lowerMessage.includes('–≥–æ—Å–∑–∞–∫—É–ø–∫–∏') || lowerMessage.includes('—Ç–µ–Ω–¥–µ—Ä—ã')) {
        category = 'goszakupki';
      } else if (lowerMessage.includes('–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å') || lowerMessage.includes('wildberries') || 
                 lowerMessage.includes('ozon') || lowerMessage.includes('—è–Ω–¥–µ–∫—Å')) {
        category = 'marketplaces';
      } else if (lowerMessage.includes('—á–∞—Å—Ç–Ω—ã–µ') || lowerMessage.includes('–∞–≤–∏—Ç–æ') || 
                 lowerMessage.includes('—é–ª–∞')) {
        category = 'private';
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
      const result = await searchWithAI(searchQuery);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      if (result.products.length > 0) {
        const sources = Array.from(new Set(result.products.map(p => p.source)));
        const priceRange = {
          min: Math.min(...result.products.map(p => p.price)),
          max: Math.max(...result.products.map(p => p.price))
        };
        
        result.aiAnalysis = `üîç **–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞**\n\n` +
          `**–ó–∞–ø—Ä–æ—Å:** "${searchQuery}"\n` +
          `**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** ${category === 'all' ? '–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏' : 
                           category === 'goszakupki' ? '–ì–æ—Å–∑–∞–∫—É–ø–∫–∏' : 
                           category === 'marketplaces' ? '–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã' : 
                           '–ß–∞—Å—Ç–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'}\n` +
          `**–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:** ${result.products.length}\n` +
          `**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** ${sources.join(', ')}\n` +
          `**–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:** ${priceRange.min.toLocaleString()}‚ÇΩ - ${priceRange.max.toLocaleString()}‚ÇΩ\n\n` +
          `**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n` +
          `‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã\n` +
          `‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ —Ü–µ–Ω—ã –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –ø–ª–æ—â–∞–¥–∫–∞–º–∏\n` +
          `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞\n` +
          `‚Ä¢ –ò–∑—É—á–∏—Ç–µ –æ—Ç–∑—ã–≤—ã –æ –ø—Ä–æ–¥–∞–≤—Ü–∞—Ö`;
      } else {
        result.aiAnalysis = `‚ùå **–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n` +
          `**–ó–∞–ø—Ä–æ—Å:** "${searchQuery}"\n\n` +
          `**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n` +
          `‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n` +
          `‚Ä¢ –°–ª–∏—à–∫–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å\n` +
          `‚Ä¢ –¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö\n\n` +
          `**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n` +
          `‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞\n` +
          `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –æ–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n` +
          `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n` +
          `‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ –≤ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö`;
      }

      setLastResult(result);
      return result;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      throw err;
    } finally {
      setIsLoading(false);
    }
  }, [searchWithAI]);

  const searchByCategory = useCallback(async (query: string, category: 'goszakupki' | 'marketplaces' | 'private' | 'all'): Promise<CategorySearchResult> => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch(`/api/search/${category}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      }

      const data = await response.json();
      
      if (data.success) {
        const result: CategorySearchResult = {
          category,
          query: data.data.query,
          products: data.data.products,
          total: data.data.total,
          searchTime: data.data.searchTime,
          categoryName: data.data.categoryName
        };
        
        setLastCategoryResult(result);
        return result;
      } else {
        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      throw err;
    } finally {
      setIsLoading(false);
    }
  }, []);

  return {
    searchWithAI,
    searchWithChat,
    searchByCategory,
    isLoading,
    error,
    lastResult,
    lastCategoryResult,
    clearError,
  };
} 