// ============================================================================
// WEB SCRAPER EXAMPLES & USAGE PATTERNS
// ============================================================================

import { webScraper, WebScraper } from './web-scraper';
import { ScrapingOptions, ScrapingSource } from './web-scraper-types';

/**
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–µ–±-—Å–∫—Ä–∞–ø–ø–µ—Ä–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
 */

// ============================================================================
// BASIC USAGE EXAMPLES
// ============================================================================

/**
 * –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
export async function basicProductSearch() {
  try {
    console.log('üîç Starting basic product search...');
    
    const results = await webScraper.scrapeProducts(
      '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', 
      ['wildberries', 'ozon'], 
      { maxProducts: 10, headless: true }
    );
    
    console.log('‚úÖ Search completed!');
    results.forEach(result => {
      console.log(`${result.source}: ${result.products.length} products found`);
    });
    
    return results;
  } catch (error) {
    console.error('‚ùå Basic search failed:', error);
    throw error;
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä 2: –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
 */
export async function searchAllSources() {
  try {
    console.log('üåê Searching all available sources...');
    
    const results = await webScraper.scrapeProducts(
      '–Ω–æ—É—Ç–±—É–∫',
      ['all'],
      { 
        maxProducts: 5, 
        headless: true, 
        delay: 2000,
        timeout: 30000 
      }
    );
    
    console.log('‚úÖ All sources search completed!');
    return results;
  } catch (error) {
    console.error('‚ùå All sources search failed:', error);
    throw error;
  }
}

// ============================================================================
// ADVANCED USAGE EXAMPLES
// ============================================================================

/**
 * –ü—Ä–∏–º–µ—Ä 3: –ü–æ–∏—Å–∫ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
export async function advancedSearchWithCustomOptions() {
  try {
    console.log('‚öôÔ∏è Starting advanced search with custom options...');
    
    const customOptions: ScrapingOptions = {
      maxProducts: 20,
      headless: false, // –ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      timeout: 45000,
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      delay: 3000,
      retries: 2,
      scrollToLoad: true,
      maxScrolls: 5,
      waitForSelector: '.product-card',
      rateLimit: {
        requestsPerSecond: 1,
        delayBetweenRequests: 2000
      }
    };
    
    const results = await webScraper.scrapeProducts(
      '–Ω–∞—É—à–Ω–∏–∫–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ',
      ['wildberries', 'ozon', 'yandex'],
      customOptions
    );
    
    console.log('‚úÖ Advanced search completed!');
    return results;
  } catch (error) {
    console.error('‚ùå Advanced search failed:', error);
    throw error;
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä 4: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫—Ä–∞–ø–ø–∏–Ω–≥–∞
 */
export async function monitorScrapingStats() {
  try {
    console.log('üìä Monitoring scraping statistics...');
    
    // –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    webScraper.resetStats();
    
    // –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∏—Å–∫–æ–≤
    await webScraper.scrapeProducts('—Ç–µ–ª–µ—Ñ–æ–Ω', ['wildberries'], { maxProducts: 5 });
    await webScraper.scrapeProducts('–ø–ª–∞–Ω—à–µ—Ç', ['ozon'], { maxProducts: 5 });
    await webScraper.scrapeProducts('—á–∞—Å—ã', ['yandex'], { maxProducts: 5 });
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = webScraper.getStats();
    
    console.log('üìà Scraping Statistics:');
    console.log(`Total Requests: ${stats.totalRequests}`);
    console.log(`Successful: ${stats.successfulRequests}`);
    console.log(`Failed: ${stats.failedRequests}`);
    console.log(`Success Rate: ${stats.successRate.toFixed(2)}%`);
    console.log(`Total Products: ${stats.totalProducts}`);
    console.log(`Average Response Time: ${stats.averageResponseTime.toFixed(2)}ms`);
    console.log(`Total Time: ${stats.totalTime}ms`);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    console.log('\nüìä Source-specific stats:');
    Object.entries(stats.sources).forEach(([source, sourceStats]) => {
      console.log(`${source}:`);
      console.log(`  Requests: ${sourceStats.requests}`);
      console.log(`  Success: ${sourceStats.success}`);
      console.log(`  Failed: ${sourceStats.failed}`);
      console.log(`  Products: ${sourceStats.products}`);
      console.log(`  Avg Time: ${sourceStats.avgTime.toFixed(2)}ms`);
    });
    
    return stats;
  } catch (error) {
    console.error('‚ùå Stats monitoring failed:', error);
    throw error;
  }
}

// ============================================================================
// BATCH PROCESSING EXAMPLES
// ============================================================================

/**
 * –ü—Ä–∏–º–µ—Ä 5: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export async function batchProcessingExample() {
  try {
    console.log('üì¶ Starting batch processing...');
    
    const queries = [
      '—Å–º–∞—Ä—Ç—Ñ–æ–Ω Samsung',
      '–Ω–æ—É—Ç–±—É–∫ Dell',
      '–Ω–∞—É—à–Ω–∏–∫–∏ Sony',
      '—á–∞—Å—ã Apple',
      '–ø–ª–∞–Ω—à–µ—Ç iPad'
    ];
    
    const sources: ScrapingSource[] = ['wildberries', 'ozon'];
    const options: ScrapingOptions = {
      maxProducts: 3,
      headless: true,
      delay: 1000
    };
    
    const allResults = [];
    
    for (const query of queries) {
      console.log(`üîç Processing query: "${query}"`);
      
      try {
        const results = await webScraper.scrapeProducts(query, sources, options);
        allResults.push(...results);
        
        console.log(`‚úÖ Query "${query}" completed`);
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
      } catch (error) {
        console.error(`‚ùå Query "${query}" failed:`, error);
      }
    }
    
    console.log(`üèÅ Batch processing completed! Total results: ${allResults.length}`);
    return allResults;
    
  } catch (error) {
    console.error('‚ùå Batch processing failed:', error);
    throw error;
  }
}

// ============================================================================
// ERROR HANDLING EXAMPLES
// ============================================================================

/**
 * –ü—Ä–∏–º–µ—Ä 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
 */
export async function errorHandlingExample() {
  try {
    console.log('üîÑ Testing error handling and retries...');
    
    const options: ScrapingOptions = {
      maxProducts: 5,
      retries: 3,
      timeout: 10000, // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      delay: 1000
    };
    
    const results = await webScraper.scrapeProducts(
      '—Ç–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç',
      ['wildberries'],
      options
    );
    
    console.log('‚úÖ Error handling test completed');
    return results;
    
  } catch (error) {
    console.error('‚ùå Error handling test failed:', error);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
    const stats = webScraper.getStats();
    console.log('üìä Error Statistics:');
    stats.errors.forEach((error, index) => {
      console.log(`Error ${index + 1}:`);
      console.log(`  Source: ${error.source}`);
      console.log(`  Error: ${error.error}`);
      console.log(`  Timestamp: ${new Date(error.timestamp).toISOString()}`);
    });
    
    throw error;
  }
}

// ============================================================================
// UTILITY FUNCTION EXAMPLES
// ============================================================================

/**
 * –ü—Ä–∏–º–µ—Ä 7: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */
export async function utilityFunctionsExample() {
  try {
    console.log('üîß Testing utility functions...');
    
    // –¢–µ—Å—Ç Cheerio —Å–∫—Ä–∞–ø–ø–∏–Ω–≥–∞
    const cheerioResults = await webScraper.scrapeWithCheerio(
      'https://example.com',
      'h1'
    );
    console.log('Cheerio results:', cheerioResults);
    
    // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    const availableSources = webScraper.getAvailableSources();
    console.log('Available sources:', availableSources);
    
    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    const wildberriesConfig = webScraper.getSourceConfig('wildberries');
    console.log('Wildberries config:', wildberriesConfig?.name);
    
    console.log('‚úÖ Utility functions test completed');
    
  } catch (error) {
    console.error('‚ùå Utility functions test failed:', error);
    throw error;
  }
}

// ============================================================================
// PERFORMANCE TESTING EXAMPLES
// ============================================================================

/**
 * –ü—Ä–∏–º–µ—Ä 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export async function performanceTest() {
  try {
    console.log('‚ö° Starting performance test...');
    
    const startTime = Date.now();
    
    // –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const testCases = [
      { maxProducts: 5, headless: true, delay: 0 },
      { maxProducts: 10, headless: true, delay: 500 },
      { maxProducts: 15, headless: true, delay: 1000 }
    ];
    
    const results = [];
    
    for (const testCase of testCases) {
      const caseStartTime = Date.now();
      
      try {
        const result = await webScraper.scrapeProducts(
          '—Ç–µ—Å—Ç',
          ['wildberries'],
          testCase
        );
        
        const caseTime = Date.now() - caseStartTime;
        results.push({
          config: testCase,
          time: caseTime,
          products: result.reduce((sum, r) => sum + r.totalFound, 0)
        });
        
        console.log(`‚úÖ Test case completed in ${caseTime}ms`);
        
      } catch (error) {
        console.error(`‚ùå Test case failed:`, error);
      }
    }
    
    const totalTime = Date.now() - startTime;
    
    console.log('üìä Performance Test Results:');
    console.log(`Total Time: ${totalTime}ms`);
    results.forEach((result, index) => {
      console.log(`Case ${index + 1}:`);
      console.log(`  Config: ${JSON.stringify(result.config)}`);
      console.log(`  Time: ${result.time}ms`);
      console.log(`  Products: ${result.products}`);
    });
    
    return results;
    
  } catch (error) {
    console.error('‚ùå Performance test failed:', error);
    throw error;
  }
}

// ============================================================================
// MAIN DEMO FUNCTION
// ============================================================================

/**
 * –ì–ª–∞–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
export async function runAllExamples() {
  try {
    console.log('üöÄ Starting Web Scraper Examples...\n');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await webScraper.initialize({ headless: true });
    
    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
    console.log('1Ô∏è‚É£ Basic Product Search');
    await basicProductSearch();
    
    console.log('\n2Ô∏è‚É£ Search All Sources');
    await searchAllSources();
    
    console.log('\n3Ô∏è‚É£ Advanced Search');
    await advancedSearchWithCustomOptions();
    
    console.log('\n4Ô∏è‚É£ Monitor Statistics');
    await monitorScrapingStats();
    
    console.log('\n5Ô∏è‚É£ Batch Processing');
    await batchProcessingExample();
    
    console.log('\n6Ô∏è‚É£ Error Handling');
    await errorHandlingExample();
    
    console.log('\n7Ô∏è‚É£ Utility Functions');
    await utilityFunctionsExample();
    
    console.log('\n8Ô∏è‚É£ Performance Test');
    await performanceTest();
    
    console.log('\n‚úÖ All examples completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Examples execution failed:', error);
  } finally {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    await webScraper.close();
    console.log('üîí Web scraper closed');
  }
}

// ============================================================================
// EXPORTS
// ============================================================================

export {
  basicProductSearch,
  searchAllSources,
  advancedSearchWithCustomOptions,
  monitorScrapingStats,
  batchProcessingExample,
  errorHandlingExample,
  utilityFunctionsExample,
  performanceTest,
  runAllExamples
};
